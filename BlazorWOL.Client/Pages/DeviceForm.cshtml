@using System.Text.RegularExpressions

<div class="device">
  <div class="name">
    <span class="caption">Device Name</span>
    <span class="input-field">
      <input type="text" name="name" bind="@Item.Name" />
    </span>
  </div>
  <div class="mac-address">
    <span class="caption">MAC Address</span>
    <span class="input-field">
      <input type="text" name="name" bind="@Item.MACAddress" />
    </span>
  </div>
  <div class="error-message">
    @ErrorMessage
  </div>
  <div class="actions">
    <a class="button" onclick="@OnOk">OK</a>
    <a class="button" href="/">Cancel</a>
  </div>
</div>

@functions {
  [Parameter]
  Device Item { get; set; }

  [Parameter]
  Func<Device, Task> OnClickOk { get; set; }

  string ErrorMessage = "";

  async Task OnOk() {
    if (string.IsNullOrWhiteSpace(Item.Name)) {
      ErrorMessage = "Please enter device name.";
    } else if (string.IsNullOrWhiteSpace(Item.MACAddress)) {
      ErrorMessage = "Please enter MAC address.";
    } else if (!isValidMACAddress(Item.MACAddress)) {
      ErrorMessage = "MAC address format is incorrect.";
    } else {
      ErrorMessage = "";
    }
    if (ErrorMessage != "") {
      return;
    }

    Item.MACAddress = Item.MACAddress.Replace("-", ":").ToUpper();

    await OnClickOk?.Invoke(Item);
    Item = new Device();
  }

  bool isValidMACAddress(string MACAddress) =>
    Regex.IsMatch(
      Item.MACAddress,
      @"^[\da-f]{2}((:|-)[\da-f]{2}){5}$",
      RegexOptions.IgnoreCase);
}
